FILES_AND_DIRECTORIES

[
file types
 -regular file
	there is no distinction to the UNIX kernel whether the
	data is text or binary. Any interpretation of the contents
	is left to the application processing the file.
	(Note that, to execute a program, the kernel must understand its format.
	All binary executable files conform to a format that allows the
	kernel to identify where to load a program's text and data)
 -directory file
	A file that contains the names of other files and pointers to information
	on these files. Any process that has read permission for a directory
	file can read the contents of the directory, but only the kernel can
	write directle to a directory file. Processes must use the functions
	to make changes to a directory.
 -block special file
	A type of file providing buffered i/o access in fixed-size units
	to devices such as disk drives.
 -character special file
	A type of file providing unbuffered i/o access in variable-sized units
	to devices. All devices on a system are either block special files
	or character special files.
 -FIFO
	A type of file used for communication between processes. It's 
	sometimes called a named pipe
 -socket
	A type of file used for network communication between processes. A PROCESSES
	CAN ALSO BE USED FOR NON-NETWORK COMMUNICATION BETWEEN PROCESSES ON A 
	SINGLE HOST.
 -symbolic link
	A type of file that points to another file.
]


[
file type macros in <sys/stat.h>
 -S_ISREG()	regular file
 -S_ISDIR()	directory file
 -S_ISCHR()	character special file
 -S_ISBLK()	block special file
 -S_ISFIFO()	pipe or FIFO
 -S_ISLNK()	symbolic link
 -S_ISSOCK()	socket
]


[
POSIX.1 allows implementations to represent interprocess communication (IPC)
objects, such as message queues and semaphores, as files
IPC type macros in <sys/stat.h>
 -S_TYPEISMQ()	message queue
 -S_TYPEISSEM()	semaphore
 -S_TYPEISSHM()	shared memory object
]


[
process IDs
 -real user ID
 -real group ID
 -effective user ID
 -effective group ID
 -saved set-user-ID
 -saved set-group-ID
]


[
When we execute a program file, the effective user IDE of the process is usually
the real user IDE, and the effective group ID is usually the real group ID. 
However, we can also set a special flag in the file's mode word (st_mode)
that says "when this file is executed, set the effective user ID of the process
to be the owner of the file (st_uid)". This can be seen as S bit in ls -l.
Similarly, we can set another bit in the file's mode word that causes the 
effective group ID to be the group owner of the file (st_gid)
for instance, passwd(1) is a set-user-ID program. This is required so that the
program can write the new password to the password file, typically either
/etc/passwd or /etc/shadow file that should be writable only by the superuser.
Because a process that is running set-user-ID to some other user usually
assumes extra permissions, it must be written carefully.
]


[
file access permissions
 -user
	S_IRUSR	read
	S_IWUSR	write
	S_IXUSR	execute
 -group
	S_IRGRP	read
	S_IWGRP	write
	S_IXGRP	execute
 -other
	S_IROTH read
	S_IWOTH write
	S_IXOTH execute
see chmod(1)
]


[
Whenever we want to open any type of file by name, we must
have execute permission in each directory mentioned in the name,
including the CWD, if it is implied. This is why the execute permission bit
for a directory is often called the search bit.
-For example, to open the file /usr/include/stdio.h, we need execute permission
 in the directory /, execute permission in the directory /usr and execute permission
 in the directory /usr/include. We the need appropriate permission for the file itself
-the read permission for a file determines whether we can open an existing file
 for reading
-the write permission for a file determines whether we can open an existing file
 for writing
-we must have write permission for a file to specify the O_TRUNC flag in the open
 function
-we cannot create anew file in a directory unless we have write permission and
 execute permission in the directory
-to delete an existing file, we need write permission and execute permission in the
 directory containing the file. We do not need read permission or write permission 
 for the file itself
-execute permission for a file must be on if we want to execute the file using
 any of the seven exec functions. The file also has to be a regular file.
]


[
The "file access test that the kernel performs each time a process opens, creates,
or deletes a file depend on the owners of the file.
The two owner IDs are properties of the file, whereas the two effective IDs and
the supplementary group IDs are properties of the process.
 -If the effective user ID of the process is 0 (the superuser), access is allowed.
  This gives the superuser free rein throughout the entire file system.
]

[
Sticky bit
S_ISVTX - saved text bit
if it was set for an executable program file, then the first time the program 
was executed, a copy of the program's text was saved in the swap area when the
process terminated. The program would then load up into memory more quickly
the next time it was executed, because the swap area was handled as a contiguous
file, as compared to the possibly random location of data blocks in a normal
UNIX file system.
]


[
st_size
-member of the stat structure, indicates lenght of regular file, directory and
 symbolic link only.
]


[
for a symbolic link, file size is the number of bytes in filename:
/usr/lib is a symbolic link, it's size is 7 (note that symbolic links do not contain
the normal \0 byte at the end of the name, as the length is specified by st_size
]


[
holes
-null bytes on the middle of the file.
]


[
file truncation
	#include <unistd.h>
	int truncate(const char *pathname, off_t length);
	int ftruncate(int fd, off_t lenght);
	^
	|
	truncate the file to length bytes.
	-if the previous size of file is larger than new length, bytes beyond length 
	 are no longer accesible.
	-if the previous size fo file is smaller than new length, a hole will be created.
]


[
the i-nodes are fixed-length entries that contain most of the information
about the file.
every inode has a link count tha contains the number of directory entries that point to it. 
Only when the link count goes to 0 can the file be deleted.
This is why the operation of "unlinking a file" does not always
mean "deleting the blocks associated with the file."
This is why the function that removes a directory entry is called unlink, not delete.
In struct stat link count is stored in st_nlink member
	nlink_t st_nlink;
The other type of link is called a symbolic link. With a symbolic link,
the actual contents of the file -the data blocks- store the name
of the file that the symbolic link points to.
The inode contains all the information about the file, the file's access permission bits, the sizeof file,
pointers to the file's data blocks...
Only two items are stored in the directory entry:
 -the filename
 -the inode number
The data type for the inode number is ino_t
Because the inode number in the directory entry points to an inode in the
same file system, a directory entry can't refer to an iode in a different file system.
When renaming a file without changing file systems, the actual contents of the file
need not be moved - all tha needs to be done is to add a new directory
entry that poins to the existing inode and then unlink the old directory entry. the link count will remain the same
]


[
leaf directory
 -a directory that doesn't contain any other directories
]


[
#include <unistd.h>
int link(const char *existingpath, const char *newpath);
int linkat(int efd, const char *existingpath, int nfd, 
			const char *newpath, int flag);
^
|
create a new directory entry newpath, that references the existing
file existingpath. If the newpath already exists, an error is returned. Only the last component of the newpath
is created. The rest of the path must already exist
The creation of the new directory entry and the increment of the link count must be an
atomic operation.
_
int unlink(const char *pathname);
int unlinkat(int fd, const char *pathname, int flag);
^
|
remove the directory entry and decrement the link count of the file referenced by pathname.
To unlink a file, we mmust have write permission and execute permission in the directory containing the 
directory entry. If sticky bit is set in this directory we must have
write permission for the directory and meet one of the following criteria:
 -own the file
 -own the directory
 -have superuser privileges
Only when the link count reaches 0 can the contents of the file be deleted. One other condition prevents the
contents of a file from being deleted:
 -as long as some process has the file open,its contents will not be deleted
If pathname is a symbolic link, unlink removes symbolic link, not the file referenced by the link. There is no
function to remove the file referenced by a symbolic link given the name of the link.
]


[
The superuser can call unlink with pathname specifying a directory if the file system supports it, but
the function rmdir should be used insted to unlink a directory.
-For a file, remove is identical to unlink.
-For a directory, remove is identical to rmdir.
_
#include <stdio.h>
int remove(const char *pathname);
]


[
symbolic links
-indirect pointer to a file, unlike the hard links described in the 
 previous section, which pointed directly to the inode of the file.
_
drawbacks of hard links:
 -hard links normally require that the link and the file reside in the same file system
 -only the superuser can create a hard link to a directory.
_
symbolic links are often used to "move" a file or an entire directory hierarchy to
another location on a system.
-when using functions that refer to a file by name, we always need to know whether the
 function follows a symbolic link.
-when we open a file, if the pathname passed to open specifies a symbolic link, open follows
 the link to the specified file. If  the file pointed to by the symbolic link doesn't exist,
 open return and error saying that it can't open the file. This response can confuse users
 who aren't familiar with symbolic links.
]


[
creating and reading symbolic links
	#include <unistd.h>
	int symlink(const char *actualpath, const char *sympath);
	int symlinkat(const char *actualpath, int fd, const char *sympath);
	^
	|
	a new directory entry sympath is created that points to actualpath
	 -it is not required that actualpath exist when the symbolic link is created
	 -actualpath and sympath need not reside in the same file system

	#include <unistd.h>
	ssize_t readlink(const char *restrict pathname, char *restrict buf,
		size_t bufsize);
	ssize_t readlinkat(int fd, const char* restrict pathname,
		char *restrict buf, size_t bufsize);
	^
	|
	combine the actions of open, read and close.
	 -if succesful, number of read bytes is returned.
	 -contents of the symbolic link are returned in buf
	  -buf is not null terminated!
]


[
file times
3 time fields are maintained for each files:
    -field- -description-                           -example-       -ls(1) option-
    st_atim last-access time of file data           read            -u
    st_mtim last-modification time of file data     write           default
    st_ctim last-change time of inode status        chmod, chown    -c
the ls command displays or sorts only on one of the three time values
 -by default, whe invoke with either -l or -t flag, it uses the modification time of a file.
 -the -u option causes the ls command to use the access time
 -the -c option causes it to use the changed-status time.
]


[
directory is simply a file containing directory entries:
 -filenames
 -associated inode numbers
]
