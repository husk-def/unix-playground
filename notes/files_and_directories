FILES_AND_DIRECTORIES

[
file types
 -regular file
	there is no distinction to the UNIX kernel whether the
	data is text or binary. Any interpretation of the contents
	is left to the application processing the file.
	(Note that, to execute a program, the kernel must understand its format.
	All binary executable files conform to a format that allows the
	kernel to identify where to load a program's text and data)
 -directory file
	A file that contains the names of other files and pointers to information
	on these files. Any process that has read permission for a directory
	file can read the contents of the directory, but only the kernel can
	write directle to a directory file. Processes must use the functions
	to make changes to a directory.
 -block special file
	A type of file providing buffered i/o access in fixed-size units
	to devices such as disk drives.
 -character special file
	A type of file providing unbuffered i/o access in variable-sized units
	to devices. All devices on a system are either block special files
	or character special files.
 -FIFO
	A type of file used for communication between processes. It's 
	sometimes called a named pipe
 -socket
	A type of file used for network communication between processes. A PROCESSES
	CAN ALSO BE USED FOR NON-NETWORK COMMUNICATION BETWEEN PROCESSES ON A 
	SINGLE HOST.
 -symbolic link
	A type of file that points to another file.
]


[
file type macros in <sys/stat.h>
 -S_ISREG()	regular file
 -S_ISDIR()	directory file
 -S_ISCHR()	character special file
 -S_ISBLK()	block special file
 -S_ISFIFO()	pipe or FIFO
 -S_ISLNK()	symbolic link
 -S_ISSOCK()	socket
]


[
POSIX.1 allows implementations to represent interprocess communication (IPC)
objects, such as message queues and semaphores, as files
IPC type macros in <sys/stat.h>
 -S_TYPEISMQ()	message queue
 -S_TYPEISSEM()	semaphore
 -S_TYPEISSHM()	shared memory object
]


